package com.lagou.bizImp;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lagou.biz.CompanyinfoBIZ;
import com.lagou.dao.CompanyinfoDAO;
import com.lagou.domain.Companyinfo;
import com.lagou.exception.NameExistException;
import com.lagou.exception.NameMissException;
import com.lagou.exception.PassErrorException;
import com.lagou.utils.MD5_Encoding;
import com.lagou.vo.CompanySearchVO;

@Service("CompanyinfoBIZImp")
public class CompanyinfoBIZImp implements CompanyinfoBIZ {
	@Autowired
	@Qualifier("CompanyinfoDAO")
	private CompanyinfoDAO companyinfoDAO;
	
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Companyinfo> findBySearch(CompanySearchVO searchvo) {
		
		return this.companyinfoDAO.findBySearch(searchvo);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Companyinfo> findAll() {
		// TODO Auto-generated method stub
		List<Companyinfo> companylist = companyinfoDAO.findAll();
		return companylist;
	}

	public CompanyinfoDAO getCompanyinfoDAO() {
		return companyinfoDAO;
	}

	public void setCompanyinfoDAO(CompanyinfoDAO companyinfoDAO) {
		this.companyinfoDAO = companyinfoDAO;
	}

	@Override
	public Companyinfo companylogin(String username, String password)
			throws NameMissException, PassErrorException {
		Companyinfo companyinfo = companyinfoDAO.findByUsername(username);
		if (companyinfo == null) {
			throw new NameMissException("用户名不存在！");
		} else {
			if (companyinfo.getCompanyPassword().equals(password)) {
				return companyinfo;
			} else {
				throw new PassErrorException("密码错误！");
			}
		}
	}

	@Override
	@Transactional(propagation=Propagation.REQUIRED,rollbackFor={NameExistException.class})
	public boolean reg(Companyinfo companyinfo) throws NameExistException{
			if(this.companyinfoDAO.findByCompanyLogname(companyinfo.getCompanyLogname())==null){
				MD5_Encoding md5 = new MD5_Encoding();
				companyinfo.setCompanyPassword(md5.getMD5ofStr(companyinfo.getCompanyPassword()));
				this.companyinfoDAO.save(companyinfo);
				return true;
			}else {
				throw new NameExistException("用户名已存在！");
			}
		}

	


}
